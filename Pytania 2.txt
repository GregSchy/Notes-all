
What is currying?

Currying is when you break down a function that takes multiple arguments into a series of functions 
that each take only one argument. Here's an example in JavaScript  

// function add (a, b) {
//   return a + b;
// }

// add(3, 4); // returns 7

This is a function that takes two arguments, a and b, and returns their sum. 
We will now curry this function:

// function add (a) {
//     return function (b) {
//       return a + b;
//     }
//   }


  This is a function that takes one argument, a, and returns a function that takes another argument, b,
   and that function returns their sum.

//    add(3)(4);

//     var add3 = add(3);

//     add3(4);

    The first statement returns 7, like the add(3, 4) statement. The second statement defines a new function
     called add3 that will add 3 to its argument. (This is what some may call a closure.) The third statement 
     uses the add3 operation to add 3 to 4, again producing 7 as a result.

 ===============================================


     Different ways of writing functions in JavaScript

     A Function is a block of code that is designed to perform a task and executed when it is been called or invoked.

    There are 3 ways of writing a function in JavaScript:

    Function Declaration
    Function Expression
    Arrow Function

1. function Declaration

function add(a,b) {
  console.log(a+b)
}

add(2,3)

2. Function expression:

Function Expression is another way to define a function in JavaScript.
 Here we define a function using a variable and store the returned value in that variable.

 const add = function(a, b) {
  console.log(a+b)
 }

 add(2, 3)


 3. Arrow Functions: Arrow functions are been introduced in the ES6 version of JavaScript.
  It is used to shorten the code. Here we do not use the “function” keyword and use the arrow symbol.


  let add = (a, b) => a + b;

  console.log(add(2, 3));